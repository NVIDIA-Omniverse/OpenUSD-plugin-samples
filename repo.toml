# common settings for repo_usd for all USD plug-ins
[repo_usd]
usd_root = "${root}/_build/usd-deps/nv-usd/%{config}"
usd_python_root = "${root}/_build/usd-deps/python"
generate_plugin_buildfiles = true
plugin_buildfile_format = "cmake"
generate_root_buildfile = true

# this tells repo_usd about our codeful schema extension
[repo_usd.schema.omniExampleSchema]
schema_file = "${root}/src/usd-plugins/schema/omniExampleSchema/schema.usda"
plugin_dir = "${root}/src/usd-plugins/schema/omniExampleSchema"
generate_dir = "${root}/src/usd-plugins/schema/omniExampleSchema/generated"
install_root = "${root}/_install/%{platform}/%{config}/omniExampleSchema"
library_prefix = "OmniExample"
usd_lib_dependencies = [
    "arch",
    "tf",
    "vt",
    "sdf",
    "usd"
]

# this tells repo_usd about our codeless schema extension
[repo_usd.schema.omniExampleCodelessSchema]
schema_file = "${root}/src/usd-plugins/schema/omniExampleCodelessSchema/schema.usda"
plugin_dir = "${root}/src/usd-plugins/schema/omniExampleCodelessSchema"
generate_dir = "${root}/src/usd-plugins/schema/omniExampleCodelessSchema/generated"
install_root = "${root}/_install/%{platform}/%{config}/omniExampleCodelessSchema"
is_codeless = true

# this tells repo_usd about the codeless schema for use by
# our file format / dynamic payload infrastructure
[repo_usd.schema.omniMetSchema]
schema_file = "${root}/src/usd-plugins/schema/omniMetSchema/schema.usda"
plugin_dir = "${root}/src/usd-plugins/schema/omniMetSchema"
generate_dir = "${root}/src/usd-plugins/schema/omniMetSchema/generated"
install_root = "${root}/_install/%{platform}/%{config}/omniMetSchema"
is_codeless = true

# this tells repo_usd about our file format plugin
[repo_usd.plugin.edfFileFormat]
plugin_dir = "${root}/src/usd-plugins/fileFormat/edfFileFormat"
install_root = "${root}/_install/%{platform}/%{config}/edfFileFormat"
include_dir = "include/edfFileFormat"
additional_include_dirs = [
    "../../../../_build/usd-deps/nv_usd/%{config}/include/tbb"
]
public_headers = [
    "api.h",
    "iEdfDataProvider.h",
    "edfDataProviderFactory.h"
]
private_headers = [
    "edfData.h",
    "edfPluginManager.h",
    "edfFileFormat.h"
]
cpp_files = [
    "edfData.cpp",
    "edfDataProviderFactory.cpp",
    "edfPluginManager.cpp",
    "edfFileFormat.cpp",
    "iEdfDataProvider.cpp"
]
resource_files = [
    "plugInfo.json"
]
usd_lib_dependencies = [
    "arch",
    "tf",
    "plug",
    "vt",
    "gf",
    "sdf",
    "js",
    "pcp"
]

# this tells repo_usd about our EDF provider implementing the back-end
# functionality to fulfill the dynamic payload
[repo_usd.plugin.omniMetProvider]
plugin_dir = "${root}/src/usd-plugins/dynamicPayload/omniMetProvider"
install_root = "${root}/_install/%{platform}/%{config}/omniMetProvider"
include_dir = "include/omniMetProvider"
additional_include_dirs = [
    "../../../../src/usd-plugins/fileFormat/edfFileFormat",
    "../../../../_build/target-deps/libcurl/include"
]
preprocessor_defines = [
    "CURL_STATICLIB"
]
depends_on = [
    "edfFileFormat"
]
private_headers = [
    "api.h",
    "omniMetProvider.h"
]
cpp_files = [
    "omniMetProvider.cpp"
]
resource_files = [
    "plugInfo.json"
]
usd_lib_dependencies = [
    "arch",
    "tf",
    "plug",
    "vt",
    "gf",
    "sdf",
    "js",
    "pcp",
    "usd"
]

[repo_usd.plugin.omniMetProvider."platform:windows-x86_64"]
additional_libs = [
    "edfFileFormat",
    "libcurl",
    "zlib",
    "ws2_32",
    "crypt32"
]
additional_library_dirs = [
    "../../../../_install/%{platform}/%{config}/edfFileFormat/lib",
    "../../../../_build/target-deps/libcurl/lib/rt_dynamic/release",
    "../../../../_build/target-deps/zlib/lib/rt_dynamic/release"
]

[repo_usd.plugin.omniMetProvider."platform:linux-x86_64"]
additional_libs = [
    "edfFileFormat",
    "z",
    "ssl",
    "crypto"
]
additional_static_libs = [
    "curl"
]
additional_library_dirs = [
    "../../../../_install/%{platform}/%{config}/edfFileFormat/lib",
    "../../../../_build/target-deps/libcurl/lib/release",
    "../../../../_build/target-deps/zlib/lib",
    "../../../../_build/target-deps/openssl/lib"
]

[repo_usd.plugin.omniMetProvider."platform:linux-aarch64"]
additional_libs = [
    "edfFileFormat",
    "z",
    "ssl",
    "crypto"
]
additional_static_libs = [
    "curl"
]
additional_library_dirs = [
    "../../../../_install/%{platform}/%{config}/edfFileFormat/lib",
    "../../../../_build/target-deps/libcurl/lib/release",
    "../../../../_build/target-deps/zlib/lib",
    "../../../../_build/target-deps/openssl/lib"
]